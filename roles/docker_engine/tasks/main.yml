- name: 'Install Required packages'
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - software-properties-common
      - python3-pip
  become: true

- name: 'Check if docker keyring exists'
  ansible.builtin.stat:
    path: /etc/apt/trusted.gpg.d/docker-keyring.gpg
    get_checksum: false
  register: docker_keyring

- name: 'Add Apt signing key for Docker'
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    keyring: /etc/apt/trusted.gpg.d/docker-keyring.gpg
  become: true
  when: not docker_keyring.stat.exists

- name: 'Get DEB architecture'
  ansible.builtin.command: dpkg --print-architecture  # noqa no-changed-when
  register: deb_architecture

- name: 'Add Docker source repository to sources list'
  apt_repository:
    repo: "deb [arch={{ deb_architecture.stdout }} signed-by=/etc/apt/trusted.gpg.d/docker-keyring.gpg] https://download.docker.com/linux/{{ ansible_facts['distribution'] | lower }} {{ ansible_facts['lsb']['codename'] }} stable"
    filename: docker
    update_cache: true
  become: true

- name: 'Install Docker packages'
  apt:
    pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose-plugin
  become: true

- name: 'Add user to docker group'
  ansible.builtin.user:
    name: '{{ ansible_user }}'
    groups: docker
    append: true
  become: true
  register: add_to_docker_group_result

#- name: Include reset connection tasks
#  ansible.builtin.include_tasks: reset_connection.yml
#  when: add_to_docker_group_result.changed == true and ansible_connection != "local"

- name: reset connection
  meta: reset_connection
#  when: add_to_docker_group_result.changed == true and ansible_connection != "local"

- name: 'Create docker config dir'
  file:
    path: '{{ ansible_env.HOME }}/.docker'
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  become: true

- name: 'Configure insecure Docker registries'
  ansible.builtin.template:
    src: 'templates/etc/docker/daemon.json.j2'
    dest: '/etc/docker/daemon.json'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: 0644
  become: true
  notify: 'Restart Docker'

# For local mode, this is needed:
# # usermod -aG docker {{ ansible_user }}
# # newgrp docker
- name: 'Check if user has permissions to run Docker'
  ansible.builtin.command: docker ps
  become_user: '{{ ansible_user }}'
  become: true

- name: 'Configure proxy'
  ansible.builtin.copy:
    src: 'templates/config.json.j2'
    dest: '{{ ansible_env.HOME }}/.config.json'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: 0644
    backup: true
  become: true
  when: docker_http_proxy is defined and docker_https_proxy is defined
  notify: 'Restart Docker'

- name: 'Configure data root'
  ansible.builtin.copy:
    src: 'templates/daemon.json.j2'
    dest: '/etc/docker/daeomon.json'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: 0644
    backup: true
  become: true
  when: docker_data_root is defined
  notify: 'Restart Docker'
