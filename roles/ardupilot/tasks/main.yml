- name: 'Install required packages'
  apt:
    pkg:
      - git
      - python3-pip
      - python3-empy
      - python3-virtualenv

#- name: 'Install empy package'
#  command: python3 -m pip install empy==3.3.4

- name: 'Create ardupilot src dir'
  file:
    path: '{{ ardupilot_src_dir }}'
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

- name: 'Check if ardupilot was checked out'
  ansible.builtin.stat:
    path: '{{ ardupilot_src_dir }}/.git'
  register: ardupilot

- name: 'Git checkout ardupilot'
  git:
    repo: 'https://github.com/ArduPilot/ardupilot.git'
    dest: '{{ ardupilot_src_dir }}'
    recursive: yes
    accept_hostkey: yes
  ignore_errors: true
  when: not ardupilot.stat.exists
  register: ardupilot_installed
  become_user: '{{ ansible_user }}'

- name: Create backup of .bashrc and .profile
  copy:
    src: '{{ item }}'
    dest: '{{ item }}.bak'
    backup: yes
    remote_src: true
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  with_items:
    - '{{ ansible_env.HOME }}/.bashrc'
    - '{{ ansible_env.HOME }}/.profile'

- name: 'Install ardupilot'
  command: "{{ ardupilot_src_dir }}/Tools/environment_install/install-prereqs-ubuntu.sh -y"
  become_user: '{{ ansible_user }}'
  environment:
    PYENV_VERSION: system
  tags: install-ardupilot

- name: Restore backup of .bashrc and .profile
  copy:
    src: '{{ item }}.bak'
    dest: '{{ item }}'
    backup: yes
    remote_src: true
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  with_items:
    - '{{ ansible_env.HOME }}/.bashrc'
    - '{{ ansible_env.HOME }}/.profile'

- name: 'Create .bashrc.d dir'
  file:
    dest: '{{ ansible_env.HOME }}/.bashrc.d'
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

- name: 'Configure sitl board'
  shell: "./waf configure --board sitl"
  become_user: '{{ ansible_user }}'
  args:
    chdir: '{{ ardupilot_src_dir }}'

- name: 'Check if virtualenv exists'
  stat:
    path: '/home/{{ ansible_user }}/venv-ardupilot/bin/activate'
  register: venv

- name: 'Build {{ item }}'
  shell: |
    {% if venv.stat.exists %}
    . /home/{{ ansible_user }}/venv-ardupilot/bin/activate && ./waf -j{{ ansible_processor_count }} {{ item }}
    {% else %}
    ./waf -j{{ ansible_processor_count }} {{ item }}
    {% endif %}
  become_user: '{{ ansible_user }}'
  args:
    chdir: '{{ ardupilot_src_dir }}'
  with_items:
    - rover
    - plane
    - copter
  when: venv.stat.exists

- name: 'Copy locations.txt'
  ansible.builtin.copy:
    src: 'files/locations.txt'
    dest: '{{ ardupilot_src_dir }}/Tools/autotest/locations.txt'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

- name: 'Remove modemmanager'
  ansible.builtin.apt:
    name: modemmanager
    state: absent

- name: Copy ardupilot-sitl service file
  template:
    src: templates/ardupilot-sitl.service.j2
    dest: /etc/systemd/system/ardupilot-sitl.service
    owner: root
    group: root
    mode: '0644'
  notify: 'Enable and start ardupilot-sitl service'

- name: Copy sim_vehicle wrapper
  template:
    src: templates/sim_vehicle.py.j2
    dest: /usr/local/bin/sim_vehicle.py
    owner: root
    group: root
    mode: '0755'
