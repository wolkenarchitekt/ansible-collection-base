- name: Check for NVIDIA PCI devices using grep
  shell: lspci | grep -i nvidia
  register: nvidia_check
  ignore_errors: yes


# $ glxinfo | grep "OpenGL renderer" | awk -F ': ' '{print $2}'
#Mesa Intel(R) UHD Graphics 630 (CFL GT2)

#- name: Run glxinfo to get the GPU in use
#  shell: |
#    glxinfo | grep "OpenGL renderer" | awk -F ': ' '{print $2}'
#  register: gpu_output  # Save the output to the 'gpu_output' variable
#  tags: gputest
#
#- name: Print the GPU in use
#  debug:
#    var: gpu_output.stdout  # Output the result from the registered variable
#  tags: gputest

- block:
  - name: Run nvidia-smi to check if an NVIDIA GPU is present
    shell: nvidia-smi --query-gpu=gpu_name --format=csv,noheader
    register: nvidia_gpu_output
    ignore_errors: yes  # In case nvidia-smi isn't present, ignore errors
    tags: gputest

  - name: Print the GPU in use
    debug:
      var: gpu_output.stdout  # Output the result from the registered variable

  - block:
    - name: 'Create nvidia driver dir'
      file:
        path: '/usr/local/src/nvidia-driver'
        state: directory
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
      become: true

#    Check if nviida driver is available on host, otherwise download from
    # https://us.download.nvidia.com/XFree86/Linux-x86_64/{{ nvidia_driver_version }}/NVIDIA-Linux-x86_64-{{ nvidia_driver_version }}.run
    - name: 'Copy nvidia driver'
      ansible.builtin.copy:
        src: 'files/NVIDIA-Linux-x86_64-{{ nvidia_driver_version }}.run'
        dest: '/usr/local/src/nvidia-driver'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: 0755
      become: true

    # Install gcc
    - name: 'Install packages required for nvidia driver installation'
      apt:
        pkg:
          - build-essential
          - libglvnd-dev
          - pkg-config
          - gcc-12
          - g++-12
      become: true

    # Necessary on Ubuntu < 24.04:
    # sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 20

    - name: 'Check if nvidia-smi is available'
      stat:
        path: /usr/bin/nvidia-smi
      register: nvidia_smi

    - name: Populate service facts
      service_facts:

    - name: Stop GDM3
      systemd:
        name: gdm3
        state: stopped
      become: true
      when: not nvidia_smi.stat.exists and 'docker' in services

    - name: Create blacklist-nouveau.conf file
      copy:
        dest: /etc/modprobe.d/blacklist-nouveau.conf
        content: |
          blacklist nouveau
          options nouveau modeset=0
      register: blacklist_nouveau
      become: true

    - name: Regenerate the kernel initramfs
      command: update-initramfs -u
      become: true
      notify:
        - Reboot system
      when: blacklist_nouveau.changed

    - name: 'Flush handlers to force reboot'
      meta: flush_handlers

    - name: Check if i386 architecture is enabled
      shell: dpkg --print-foreign-architectures | grep -q '^i386$'
      register: i386_arch_enabled
      ignore_errors: true
      changed_when: false
      become: true

    - name: Add i386 architecture
      command: dpkg --add-architecture i386
      when: i386_arch_enabled.rc != 0
      become: true

    - name: Install libc6:i386
      apt:
        name: libc6-i386
        state: present
      become: true

    - name: 'Install nvidia driver'
      ansible.builtin.shell: >
        /usr/local/src/nvidia-driver/NVIDIA-Linux-x86_64-{{ nvidia_driver_version }}.run \
          --no-questions \
          --accept-license \
          --no-precompiled-interface \
          --run-nvidia-xconfig \
          --silent \
          --no-check-for-alternate-installs
      become: true
      when: not nvidia_smi.stat.exists
      notify: 'Start GDM3'

    - name: Check NVIDIA driver version
      shell: nvidia-smi --query-gpu=driver_version --format=csv,noheader | head -n 1
      register: nvidia_driver_version_cmd
      changed_when: false

  #  - name: 'Throw error if NVIDIA driver version is not {{ nvidia_driver_version }}'
  #    fail:
  #      msg: "NVIDIA driver version is not {{ nvidia_driver_version }}. Current version is {{ nvidia_driver_version_cmd.stdout }}"
  #    when: nvidia_driver_version_cmd.stdout != nvidia_driver_version
  #  when: nvidia_gpu_output.rc == 0
  when: nvidia_check.rc == 0